#!perl

use 5.010001;
use strict;
use warnings;

use Progress::Any;
use Progress::Any::Output -task=>'download', 'TermProgressBarColor', freq=>0.1;
use Time::HiRes qw(sleep);

my $progress = Progress::Any->get_indicator(task => "download");

my ($file_size1, $file_size2) = @ARGV;
$file_size1 //= 10_000;
$file_size2 //= 30_000;

my $step;

# download file1
$progress->target($file_size1);
$step = int($file_size1/20); $step = 1 if $step < 1;
for (1.. $file_size1) {
    if ($_ % $step == 0) {
        $progress->update(message => "Downloading file1 ($_ bytes)", pos => $_);
        sleep 0.2;
    }
}
$progress->update(message => "Downloaded file1", pos=>$file_size1, force_update=>1);
sleep 2;
$progress->finish(); # optional

# reset progress bar
$progress->target($file_size2);
$progress->reset;

# download file2
$progress->target($file_size2);
$step = int($file_size2/20); $step = 1 if $step < 1;
for (1.. $file_size2) {
    if ($_ % $step == 0) {
        $progress->update(message => "Downloading file2 ($_ bytes)", pos => $_);
        sleep 0.2;
    }
}
$progress->update(message => "Downloaded file2", pos=>$file_size2, force_update=>1);
sleep 2;
$progress->finish; # optional

# ABSTRACT: Two tasks, progress bar for the whole two tasks
# PODNAME:

=head1 SYNOPSIS

 % progress-any-eg-progressbar-06-reusing-task [file_size1=10000] [file_size2=30000]

=head1 DESCRIPTION

This example script shows the progress of simulated downloading of two files
(the file sizes can be set via argument). The progress of each download will be
tracked with the same task: C<download>.

After the downloading of the first file is complete, we perform a C<reset()>
(a.k.a. C<< update(pos => 0) >>) to the task to change its state from
C<finished> to C<started> again.

Also notice the use of C<force_update> argument in the C<update()> to refresh
the progress bar with a "Downloaded xxx" message.
